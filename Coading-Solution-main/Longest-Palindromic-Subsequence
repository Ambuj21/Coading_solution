class Solution {
public:
 
 //     int solve(string& s, int i , int j, vector<vector<int>>&dp)
//     {  
//         if(i > j || j < i) return 0;
//         if(i == j) return 1;
//         if(dp[i][j] != -1) return dp[i][j];
//         if(s[i] == s[j]) return dp[i][j] = 2 + solve(s, i+1, j-1, dp);
        
//         return dp[i][j] = max(solve(s, i+1, j, dp), solve(s, i, j-1, dp));
//           }
    
              /*Memoization*/
    int memo(string &str1,string& str2, int i , int j , vector<vector<int>>&dp)
    {
        if(i == 0|| j == 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        
        if(str1[i-1] == str2[j-1])
            return dp[i][j] = 1 + memo(str1, str2, i-1, j-1, dp);
        return dp[i][j] = max(memo(str1, str2, i-1, j, dp), memo(str1, str2, i, j-1, dp));
    }
    
    /*tabulation*/
    int tabulation(string &str1, string &str2, int n, int m, vector<vector<int>>&dp)
    {
        for(int i = 0 ; i <= n ; i++)
            for(int j = 0 ; j <= m; j++)
                if(i == 0 || j == 0) dp[i][j] = 0;
        
        for(int i = 1 ; i <= n ; i++)
        {
            for(int j = 1 ; j <= m ; j++)
            {
                if(str1[i-1] == str2[j-1]) dp[i][j] = 1 + dp[i-1][j-1];
                else  dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                       
            }
        }
        return dp[n][m];
    }
    
    
    int longestPalindromeSubseq(string s) 
    {
          string s2 = s;
          reverse(s2.begin(), s2.end());
          int n = s.length();
          vector<vector<int>>dp(n+1, vector<int>(n+1, -1));
          // return memo(s, s2, n, n, dp);
        // return tabulation(s, s2, n, n, dp);
        return solve(s, 0, n-1, dp);
    }
};
